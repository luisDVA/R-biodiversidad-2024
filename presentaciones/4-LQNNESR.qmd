---
title: "Lo que nadie nos ense√±√≥ sobre R"
author: Luis D. Verde Arregoitia
format:
  revealjs:
    theme: curso_styles.scss
    transition: fade
    progress: true
    preview-links: true
    hide-inactive-cursor: true
    highlight-style: printing
    pause: true
editor: source
knitr:
  opts_chunk:
    dev: "ragg_png"
    retina: 3
    dpi: 200
execute:
  freeze: auto
  cache: true
  echo: true
  fig-width: 5
  fig-height: 6
---

## Temas de este bloque:

‚Äì Entornos de trabajo y configuraci√≥n  
‚Äì Iteraci√≥n y vectorizaci√≥n para evitar repetici√≥n  
‚Äì Trabajando con listas  
‚Äì Manejo de matrices  
‚Äì Atajos y herramientas para mayor eficiencia  
‚Äì Errores comunes y c√≥mo buscar soluciones  

```{r}
#| echo: false
library(dplyr)
library(gt)
library(ggplot2)
```


# Personalizando el entorno de trabajo

## Personalizaci√≥n

-   Colores para el IDE - üîó [tmThemeEditor](https://tmtheme-editor.glitch.me/) por Allen Bargi

::: {style="background-color: #3F3B3B; box-shadow: 10px 10px grey;  padding: 25px"}

:::{.neonText}
*Nadie nos va a tomar en serio en la cafeter√≠a si no programamos con un fondo oscuro*
:::

::: {style="text-align: right"}
*-Jared Lander*\
üìº [R: Then and now](https://www.youtube.com/watch?v=gjpNEVcG1nU)
:::
:::

-   Fuentes y texto - üîó [Nerd Fonts](https://www.nerdfonts.com/font-downloads)

-   Disposici√≥n de los paneles

## Personalizando el arranque en R

El archivo `.Rprofile` file contiene c√≥digo que se ejecuta cada que arrancamos R.

</br> [`.Rprofile` generalmente vive en nuestro directorio de inicio]{style="text-align: center;"}  

Podemos modificarlo con `usethis::edit_r_profile()`

*Usar con precauci√≥n para no perder reproducibilidad*

:::{.rightref}
:::{.refbox}
R Startup\
[What they forgot to teach you about R](https://rstats.wtf/r-startup.html%5D)
:::
:::

## Arranque

- Saludos o recordatorios con `cowsay`

```{r}
#| eval: false
#| echo: true

#>  ----- 
#> No olviden tomar mucha agua 
#>  ------ 
#>     \   
#>      \
#>   ><((((¬∫>  ><((((¬∫>  ><((((¬∫>  ><((((¬∫>  ><((((¬∫>
#>       
```

- Ayuda con errores de dedo con `fcuk`

```{text}
#| echo: true
#| eval: false

> lenght(1:12)
Error in lenght(1:12) : could not find function "lenght"
> fcuk::init_error_tracker()
> lenght(1:12)
Error in lenght(1:12) : could not find function "lenght"
Did you mean : length or ...length ?
```


# Iteraci√≥n 

## Aplicando una funci√≥n varias veces

Copiar/pegar c√≥digo para editarlo en an√°lisis repetitivos agrega pasos innecesarios, pierde tiempo, y aumenta el riesgo de introducir errores 

</br>

::::{.rightref}
:::{.refbox}
Nick Holt (2017)\
[Function Iterations in R](https://nick-holt.github.io/2017/12/function-iterations-in-r/)
:::
::::

## Ejercicio - futbol {background-color="#a4c5ff"}

El archivo `tabla_futbol.csv` contiene la clasificaci√≥n en la tabla global de la FIFA de los primeros 20 pa√≠ses de 1994 a 2022. Agrupa pa√≠ses en diferentes confederaciones.

</br> 

¬øDe qu√© confederaci√≥n fue el equipo 20 cada a√±o?  

ej. para 1994 Zambia fue #20 y su confederaci√≥n es "CAF"


##

### Copiando, pegando, y editando


```{r}
#| eval: false
ranking1994 <- fifa20esp[fifa20esp$periodo=="1994-06-14",]
pais201994 <- ranking1994[ranking1994$posicion==20,]$pais
pais201994
ranking1995 <- fifa20esp[fifa20esp$periodo=="1995-06-13",]
pais201995 <- ranking1995[ranking1995$posicion==20,]$pais
pais201995
```

> Siguiendo as√≠ seguramente introducimos alg√∫n error poco evidente y dif√≠cil de detectar

## Datos agrupados

La mayor√≠a de nuestras tareas se pueden desarrollar siguiendo el paradigma "_dividir - aplicar - combinar_" (
["split-apply-combine"]{style="color: purple"}):

- dividir los datos en grupos
- aplicar alguna funci√≥n a cada grupo
- combinar los resultados

::::{.rightref}
:::{.refbox}
Data Carpentry (2018)\
[Aggregating and analyzing data with dplyr](https://datacarpentry.org/R-genomics/04-dplyr.html)

Hadley Wickham (2011)\
[The split-apply-combine strategy for data analysis](https://doi.org/10.18637/jss.v040.i01)
:::
::::

## `dplyr::group_by()`

- Define grupos seg√∫n una o m√°s variables  
- Estratifica un data frame  
- equivalente a `aggregate()` y al argumento '`by =`' de `data.table`

![Manipulaci√≥n de datos en R con dplyr - Rub√©n S√°nchez](imgs/groupby.PNG){width="64%"}



## Trabajando con datos agrupados

Con la versi√≥n agrupada de nuestra tabla, las funciones de `dplyr` trabajan sobre cada grupo por separado y despu√©s se combinan los resultados.

</br>

::::{.rightref}
:::{.refbox}
RStudio (2021)\
[Data transformation with dplyr cheatsheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-transformation.pdf)
:::
:::

## Opciones para datos agrupados

- resumir valores (media, mediana, etc. por grupo)
- extraer las primeras o √∫ltimas _n_ filas por grupo
- identificar valores m√°ximos o m√≠nimos
- eliminar filas repetidas
- contar observaciones, etc.

## Datos `msleep`

Rasgos de 83 especies de mam√≠feros y sus horas de sue√±o. derivados de Savage & West (2007) e incluidos con `ggplot2`.


```{r}
#| echo: false
msleep %>% head %>% gt() %>% 
  tab_style(
    cell_text(size = '21px'),
    locations = list(cells_body(),
                     cells_column_labels(everything()),
                     cells_title()))
```

## M√°ximo `brainwt` para cada orden

:::{.med-code}
```{r}
#| eval: true
#| echo: true
#| output-location: fragment

msleep %>% group_by(order) %>% 
  slice_max(brainwt,n=1)
```
:::

## Muestrar una fila al azar de cada grupo

:::{.med-code}
```{r}
#| eval: true
#| echo: true
#| output-location: fragment

msleep %>% group_by(order) %>% 
  slice_sample(n=1)
```
:::

## "Desagrupar"

Las tablas agrupadas por `group_by` retienen el agrupamiento, y para descartarlo usamos `ungroup()`

```{r}
#| eval: true
#| echo: true
#| output-location: fragment

msleep %>% group_by(order) %>% 
  slice_sample(n=1) %>% ungroup()
```

## Agrupamiento r√°pido

En versiones recientes de `dplyr`:

- Agrupar con `.by` o `by`

```{r}
msleep %>% slice_sample(n=2, by = order) 
```


## Resumiendo valores
:::{.med-code}
```{r}
#| eval: true
#| echo: true
#| output-location: fragment

msleep %>% group_by(order) %>% 
  summarize(mediana_slp = median(sleep_total),
            media_brainwt=mean(brainwt))
```
:::

## Bucles (_for loops_)

- De gran utilidad
- No siempre es necesario escribirlos de 0

::: columns
::: {.column width="40%"}
![](imgs/Homer.png)
:::

::: {.column width="60%"}
::::{.rightref}
:::{.refbox}
Jenny Bryan\
[purrr tutorial](https://jennybc.github.io/purrr-tutorial/index.html)\
[Data Rectangling](https://speakerdeck.com/jennybc/data-rectangling)\
[purrr workshop](https://speakerdeck.com/jennybc/purrr-workshop)
:::
:::

:::
:::

## Bucles

::: columns
::: {.column width="58%"}

:::{.med-code}
```{r}
#| echo: true
#| eval: false

for (value in sequence){
   statement(s)
}

```
:::

Ejecuta una serie de enunciados (*statements*), una vez para cada elemento de un vector o lista. Se detiene al llegar al √∫ltimo elemento.

:::

::: {.column width="42%"}
:::{.med-code}
```{r}
#| eval: true
#| echo: true
for (x in 1:7){
  print(x)
} 
```
:::
:::
:::

## Ejercicio - _loops_ {background-color="#a4c5ff"}

Escribir un bucle para imprimir en la consola cada letra del alfabeto, en min√∫scula y en orden descendiente (z,y,x,w...)
</br>

:::{.callout-note}
##
hay constantes pre-instaladas en R que les pueden servir
:::



## Bucles y grupos

:::{.med-code}
```{r}
#| eval: false
#| echo: true

msleep %>% 
  group_by(order) %>% # para cada orden
  slice_sample(1) # declaraci√≥n a ejecutar 
                        
```
:::

Todo se queda dentro del data frame

## Vectorizaci√≥n 

Operaciones que ocurren en paralelo en todos los elementos (de un vector, lista, etc.) y no uno por uno en cada elemento

#### ¬øAqu√≠ qu√© pasa?

:::{.big-code}
```{r}
#| eval: false
#| echo: true

x <- c(1,3,12,4,7,8)
x > 5
```
:::


## Los operadores l√≥gicos (entre muchos otros) son vectorizados

:::{.med-code}
```{r}
#| eval: true
#| echo: true

x <- c(1,3,12,4,7,8)
x > 5
```
:::

No hace falta teclear todo √©sto o escribir un bucle

:::{.med-code}
```{r}
#| eval: false
#| echo: true

x[1]>5 ; x[2]>5
x[3]>5 ; x[4]>5
x[5]>5 ; x[6]>5
```
:::


------------------------------------------------------------------------

![American Greetings](imgs/dogscopy.jpg){width="36%" fig-align="center"}



## Cuando s√≠ necesitemos iterar:

::: columns
::: {.column width="25%"}
![](imgs/purrr.jpeg)
:::

::: {.column width="75%"}
üì¶ **`purrr`** - Herramientas para programaci√≥n funcional

-   funciones `map` que aplican una funci√≥n a cada elemento de una lista o vector y devuelve un resultado de la misma longitud que la entrada

-   trabaja bien con **listas**
-   c√≥digo legible y conciso
:::
:::

::::{.rightref}
:::{.refbox}
Thomas Mock (2018)\
[Functional Programming in R with purrr](https://towardsdatascience.com/functional-programming-in-r-with-purrr-469e597d0229)
:::
:::
------------------------------------------------------------------------

::: {style="text-align: center"}
[map(]{style="color:blue; font-family: monospace; font-weight: bold;font-size: 1.9em"}[.x]{style="color: red; font-family: Liberation Mono; font-weight: bold;font-size: 1.9em"}, [.f]{style="color: green; font-family: Liberation Mono; font-weight: bold;font-size: 1.9em"}[, ...)]{style="color:blue; font-family: Liberation Mono; font-weight: bold; font-size: 1.9em"}

</br>

para cada elemento de [.x]{style="color: red; font-family: Liberation Mono; font-weight: bold"}

aplica [.f]{style="color: green; font-family: Liberation Mono; font-weight: bold"}

`...` argumentos para [.f]{style="color: green; font-family: Liberation Mono; font-weight: bold"}
:::

## "Mapeando" funciones a datos

</br>
`map(.x,`[.f]{style="color: green; font-family: monospace; font-weight: bold"}`)`

[.f]{style="color: green; font-family: monospace; font-weight: bold"} se puede especificar como:

:::{.incremental}
- una funci√≥n existente

- una funci√≥n an√≥nima definida sobre la marcha

- una f√≥rmula: notaci√≥n abreviada para funciones 

- una funci√≥n an√≥nima abreviada (_shorthand_) en versiones recientes de R 
:::

## Funciones

![[Learn by Example.com](https://www.learnbyexample.org/r-functions/)](imgs/r-function-syntax.png)


## Definiendo funciones

usamos la funci√≥n '`function()`'

`function( arglist ) expr`{style="font-size: 1.5em; text-align: center; font-family: monospace; font-weight: bold"}

</br>

**argumentos** (`arglist`): valores para la funci√≥n

**expresi√≥n** (`expr`): un objeto que representa una acci√≥n que R puede hacer

:::{.callout-note}
##
Las expresiones pueden tener una o m√°s declaraciones
:::

## Definiendo funciones

:::{.med-code}

```{r}
#| eval: true
#| echo: true
 
mi_funcion <- function(mi_argumento){
  mi_argumento+1 # declaraci√≥n
}

mi_vector <- c(3,5,6,7)

mi_funcion(mi_argumento = mi_vector)

```
:::

------------------------------------------------------------------------

El cuerpo de la funci√≥n (las declaraciones que se ejecutan al correr la funci√≥n) se agrupa con llaves (`{}`)

:::{.med-code}
```{r}

miFunc <- function(x) {
  x + 4 # cuerpo
}
```
:::
</br>

::: columns
::: {.column width="35%"}

:::{.med-code}
```{r}
#| echo: true
#| eval: true

miFunc(6)
miFunc(x=6)
```
:::
:::

::: {.column width="65%"}
Al ejecutar funciones es opcional especificar los nombres de los argumentos, pero en funciones con \>1 argumentos, el orden importa
:::
:::

------------------------------------------------------------------------

**PERO** no hacen falta llaves para funciones con una sola declaraci√≥n

:::{.big-code}
```{r}
#| echo: true
#| eval: true
f <- function(x) x+4   
f(x=6)
```
:::

:::{.big-code}
```{r}
#| echo: true
#| eval: true
f <- function(x) mean(x)/2   
f(c(6,43,12,5,7))
```
:::

------------------------------------------------------------------------

Las llaves rodean el cuerpo en funciones con dos o m√°s declaraciones

:::{.med-code}
```{r}
#| eval: false
#| echo: true

f <- function(x)  y <- (x*0.2885) log(y) # ERROR  
```
:::

As√≠ s√≠ funciona. Las declaraciones (statements) est√°n en l√≠neas separadas

:::{.med-code}
```{r}
#| echo: true
#| eval: true
f <- function(x) {
  y <- (x*0.2885) # una declaraci√≥n
  log(y)          # otra declaraci√≥n
}

f(5)
```
:::

## Funci√≥n sin argumentos

```{r}
queHoraEs <- function(){
format(Sys.time(), "%H:%M")
}
queHoraEs()
```

## Funciones an√≥nimas

**Funciones para llevar** (se crean y se ejecutan pero nunca se asignan a un objeto con nombre)

### Sintaxis

:::{.big-code}
```{r}
#| echo: true
#| eval: true
(function(x) x * x + 3)(10)
```
:::


La definici√≥n va entre par√©ntesis para separar la funci√≥n de sus argumentos

------------------------------------------------------------------------

:::{.big-code}
```{r}
#| eval: false
#| echo: true

(function(x) x + 3)(10)
```
:::

Es lo mismo que:

:::{.big-code}
```{r}
#| eval: false
#| echo: true

f <- function(x) x + 3
f(10)
# o bien 
f <- function(x) {x + 3}
f(10)

```
:::

## Notation corta (desde R v4.1.0)

Reemplaza "`function(x) {}`" con "`\(x){}`"

:::{.big-code}
```{r}
#| eval: true
#| echo: true

(\(x) x + 3)(10)

(\(x) x / 2)(10)
```
:::


::::{.rightref}
:::{.refbox}
Russ Hyde (2021)\
[New features in R 4.1.0](https://www.jumpingrivers.com/blog/new-features-r410-pipe-anonymous-functions/)
:::
:::

:::{.callout-note}
## 
Los desarrolladores del `tidyverse` est√°n migrando al uso de esta notaci√≥n
:::


## Funciones an√≥nimas

- √ötiles para aplicar una funci√≥n personalizada a varios elementos a la vez

- Tambi√©n conocidas como  *expresiones lambda*

- Autocontenidas

- Comparables con m√©todos parecidos en Python

## Por qu√© escribir nuestras propias funciones

- Menos repetici√≥n  

- Mayor brevedad  

- Menor posibilidad de errores 

- Aprovechar las herramientas que nos dejan aplicar funciones a muchos elementos a la vez

::::{.rightref}
:::{.refbox}
Jenny Bryan - Stat545\
[Write your own R functions](https://stat545.com/functions-part1.html)
:::
:::

# Listas

## Listas 

Objetos que pueden contener elementos de diferentes tipos como n√∫meros, cadenas de texto, vectores, tablas, o incluso m√°s listas

:::{.med-code}
```{r}
#| echo: true
#| eval: true 
 
mi_lista <- list(
  un_numero = 7,
  un_vector = c("rata", "gato", "taco"),
  un_dataframe = data.frame(
    a = 1:3, b = c("K", "L", "M")))
```
:::

::::{.rightref}
:::{.refbox}
Rebecca Barter (2019)\
[Learn to purrr](https://www.rebeccabarter.com/blog/2019-08-19_purrr/)
:::
:::

------------------------------------------------------------------------

:::{.med-code}
```{r}
mi_lista
```
:::



## Podemos creas listas partiendo otros objetos

Separando una data frame agrupada en una lista de data frames, una para cada grupo.

```{r}

gremios <- 
  msleep %>% group_by(vore) %>%
  group_split()
```

## 

```{r}
gremios
```

## 

```{r}
class(gremios)
```

##

`group_keys()` regresa los grupos

:::{.med-code}
```{r}
msleep %>% group_by(vore) %>%
  group_keys()
```
:::

## 'Indexando' listas

![Hadley Wickam (2015) en [Twitter](https://twitter.com/hadleywickham/status/643381054758363136?s=20&t=0Gu4Qs757o5KHEJR2ZwkEg)](imgs/listspepper.png){width="76%"}

## Accediendo a elementos de listas

Primer elemento (`[[1]]`)

```{r}
#| eval: true
#| echo: true
 
gremios[[1]] %>% 
  select(name,genus) %>% head

```


## Segundo elemento

```{r}
#| eval: true
#| echo: true

gremios[[2]] %>% 
  select(name,genus, vore, conservation) %>% 
  head

```

##

![](imgs/purrrPost.png)


::: {style="text-align: right"}
Luis (2017)\
[Export Iteratively](https://luisdva.github.io/rstats/export-iteratively/)
:::

## ¬øPara qu√© usar listas?

- Clase vers√°til para almacenar varios tipos de objetos

- F√°ciles de crear partiendo otros objetos

- Cada elemento puede tener nombre

## 'Mapeo' de funciones a datos

- Aplicar funciones iterativamente

- Importar varios archivos en un solo comando

- Modificar y/o exportar m√∫ltiples objetos

## Aplicar funciones iterativamente

```{r}
#| eval: true
#| echo: true

library(datos)
library(purrr)
# tres vectores (num√©ricos)
masa <- pinguinos$masa_corporal_g
pico <- pinguinos$largo_pico_mm
aleta <- pinguinos$largo_aleta_mm
# juntarlos en una lista
rasgos <- list(masa,pico,aleta)
# aplicar la funci√≥n "mean" a cada elemento
map(rasgos,mean)
```
## 

### con argumentos adicionales

```{r}
# aplicar la funci√≥n "mean" a cada elemento
map(rasgos,mean,na.rm=TRUE)
```

## Aplicar funciones personalizadas iterativamente

:::{.med-code}
```{r}

# obtener min, max, y la diferencia
resumenMMR <- function(x){
  min_x <- min(x,na.rm = TRUE)
  max_x <- max(x,na.rm = TRUE)
  maxmin <- max_x - min_x
  c(min_x, max_x, maxmin)
}

```
:::

## Probar con vectores

:::{.med-code}
```{r}
resumenMMR(masa)
resumenMMR(aleta)
```
:::

## `map()` para aplicar nuestra funci√≥n a la lista

:::{.callout-note}
##
Solo usamos el nombre de la funci√≥n
:::

:::{.med-code}
```{r}
map(.x = rasgos, .f = resumenMMR)
```
:::


## `map()` con salidas espec√≠ficas

`map()` regresa listas

`map_lgl()` regresa un vector T/F

`map_int()` regresa un vector num√©rico

`map_dbl()` regresa un vector num√©rico (con decimales)

`map_chr()` regresa un vector de caracteres

`map_df()` junta todo en un data frame

##

:::{.med-code}
```{r}

# regresa una lista
map(rasgos, median, na.rm = TRUE)
# aplana la lista en un vector
map_dbl(rasgos, median, na.rm = TRUE)

```
:::

## `map()` con funciones an√≥nimas

Funciones que podemos escribir dentro de `map()` sin definir


::::{.rightref}
:::{.refbox}
Mike Cheng (2019)\
[Anonymous Functions in R - Part 1](https://coolbutuseless.github.io/2019/03/13/anonymous-functions-in-r-part-1/)
:::
:::

## 

Mismo comportamiento

:::{.med-code}
```{r}
#| eval: false
#| echo: true

listaNums <- list(c(5:10),c(20:27))
# funci√≥n an√≥nima
map(listaNums, function(x) x+2)
# f√≥rmula
map(listaNums, ~ .x + 2)
# notaci√≥n 'nueva'
map(listaNums,\(x) x+2)
```
:::

------------------------------------------------------------------------

En notaci√≥n de f√≥rmula (usando `~`):

`.x` siempre se refiere al elemento del vector o lista con el que estamos iterando

Internamente `~.x + 4` se vuelve `function(x) x+4`

## Importando o escribiendo muchos archivos

[map(.x,.f)]{style="font-size: 1.5em; text-align: center; font-family: monospace"}

`.x` puede ser una lista o vector de rutas de archivo

`.f` puede ser una funci√≥n que lee o escribe archivos

:::{style="text-align: center"}
üìÑüìÑüìÑüìÑüìÑüìÑüìÑüìÑüìÑ
:::

## Ejercicio {background-color="#a4c5ff"}

### Crear una carpeta llena de archivos de texto

- cargar el archivo `resultados_21k.csv`

- agrupar los datos por localidad y crear una lista de data frames con una para cada localidad

- crear un vector con los nombres de las localidades

:::{.callout-note}
##
 üò≤ es posible iterar con dos _inputs_ en paralelo
:::

## `map()` con dos inputs

[`map2(.x, .y, .f)`]{style="font-size: 1.5em; text-align: center; font-family: monospace"}

Ambas listas de vectores de entrada se le pasan como argumentos a la funci√≥n `.f`

![](imgs/map2.png){width="87%"}

::::{.rightref}
:::{.refbox}
Altman et al. (2021)\
[Map with multiple inputs](https://dcl-prog.stanford.edu/purrr-parallel.html)
:::
:::

## Ejercicio - Carpeta con archivos {background-color="#a4c5ff"}

-   crear una carpeta "resultados21k" 

-   usar `here()` para crear rutas estables y port√°tiles para cada localidad, por ejemplo: `here("datos","resultados21k","Usaquen")`, teniendo en cuenta que `here()` es una funci√≥n vectorizada

-   pasar la lista de data frames y el vector de rutas a `write_csv` de `readr` o `write.csv` de R base

üî•üèÉüî•

## Ejercicio - Importando varios archivos a la vez {background-color="#a4c5ff"}

- usar `dir_ls()` para crear un vector con las rutas de los archivos creados en el paso anterior

- importar cada elemento de este vector con `map()` y `read_csv()` de `readr`

- usar funciones con regresos espec√≠ficos para terminar con la tabla inicial


# Atajos y herramientas para mayor eficiencia  

##


![](imgs/remote-work-airplane-laptop.jpg)

## Programando eficientemente

[Ctrl == ‚åò Command && Alt == ‚å• Option]{style="font-size: 1.5em; text-align: center"}

- cursor multilinea (`ctrl`+`alt`+`arriba`) o (`ctrl`+`alt`+`abajo`)
- quitar con `esc`

## Atajos de teclado

-   panel de atajos (`alt`+`shift`+`k`)
-   insertar 'pipe' (`ctrl`+`shift`+`m`)
-   operador de asignaci√≥n (`alt`+`-`)
-   arrastrar l√≠nea (`alt`+`up`) o (`alt`+`down`)
-   ejecutar l√≠nea (`ctrl`+`enter`)
-   indentar o 'desindentar' selecci√≥n (`tab` y `shift`+`tab`)
-   convertir selecci√≥n a comentario (`ctrl` + `shift` + `c`)

::::{.rightref}
:::{.refbox}
[RStudio Shortcuts and Tips (2021)](https://appsilon.com/rstudio-shortcuts-and-tips/)
:::
:::

## Atajos √∫tiles

-   Cambiar enfoque entre paneles
    -   (`ctrl`+`1` hasta `8`)
    -   Maximizar paneles con (`ctrl`+`shift`+`1` hasta `8`)

![](imgs/movingfocus.gif){width="48%"}

## M√°s atajos

Modificar selecci√≥n [`ctrl`+`alt`+`shift`+`m`]{style="color: orange"}

Para acceder a la documentaci√≥n [?]{style="color: orange"} o [F1]{style="color: orange"}

Abriendo objetos en el visualizador

[`ctrl` + click]{style="color: orange"}

Ejecutar de nuevo la √∫ltima l√≠nea  

[`ctrl` + Alt + P]{style="color: orange"}

### Abrir el directorio de trabajo 
[`shell.exec(getwd())`]{style="color: orange"} en Windows y en Linux [`browseURL(getwd())`]{style="color: orange"}


## Pr√°ctica {background-color="#a4c5ff"}

Exploremos la diversidad de paquetes que hay en CRAN hoy mismo:

```{r}
#| echo: true
#| eval: false

library(dplyr)
library(stringr)
p_db <- tools::CRAN_package_db()
p_db <- p_db %>% select(Package, Author, Description, Title)
```



## üì¶ [`annotater`](https://annotater.liomys.mx)


Agregar detalles sobre los paquetes que estamos mencionando en nuestros scripts

Fuente y versi√≥n

```{r}
#| echo: true
#| eval: false

library(dplyr)   # CRAN v1.0.7
library(janitor) # CRAN v2.1.0
```

T√≠tulo, fuente y versi√≥n

```{r}
#| echo: true
#| eval: false

library(readr) # Read Rectangular Text Data, CRAN v2.0.2
```

-   *Tambi√©n podemos anotar cu√°les funciones o datos de c/ paquete estamos usando*

## üì¶ [`littleboxes`](https://github.com/ThinkR-open/littleboxes)



Cajas para t√≠tulos

```{r}
#| echo: true
#| eval: false

##%##################################################%##
#                                                      #
####    Mi an√°lisis en R ,  Luis, Oct 2022          ####
#                                                      #
##%##################################################%##

```

## üì¶ `packup`

https://github.com/MilesMcBain/packup

Acomoda los llamados a `library()` al principio del archivo, quitando duplicados y ordenando alfab√©ticamente.

> El orden alfab√©tico puede no ser adecuado


## Secciones de c√≥digo y el esquema de documento

```{r}
#| echo: true
#| eval: false

# Mi secci√≥n nueva ------------------------------------ 
```

Dividir un script en segmentos discretos

Las secciones se pueden colapsar y funcionan con el panel de navegaci√≥n del editor de fuente.

-   Crear con cuatro guiones despu√©s de un comentario
-   Insertar con `ctrl` + `shift` + `R`

## Utilidades geniales

### üì¶ [`datapasta`](https://milesmcbain.github.io/datapasta/)

Copiar y pegar datos desde y hacia R, manipular vectores

![](imgs/tribble_paste.gif){width="48%"}

# Errores comunes y como solucionarlos

## 1 - **Resetear**

Reiniciar R (limpia la ruta de b√∫squeda, "desprende" objetos, regresa opciones a sus valores predeterminados) 

:::{.callout-note}
##
_search path_: los entornos que definen los objetos y funciones a los que podemos acceder desde el entorno de trabajo global
:::

### prueba
(e.g. `Sys.setenv(LANGUAGE="ko"`))

## 2 - **Reprex** (ejemplos reproducibles)

Crear el ejemplo m√°s simple posible que genere el mismo error para poder confirmar o resolver alg√∫n problema

- Proporcionar datos
- Acotarse al problema  
- Paquetes, versiones, OS
- Que otras personas pueda copiar, pegar,   y ejecutar

::::{.rightref}
:::{.refbox}
Jenny Bryan (2020)\
[Object of type 'closure' is not subsettable](https://www.rstudio.com/resources/rstudioconf-2020/object-of-type-closure-is-not-subsettable/)
:::
::::

## Errores comunes

- paquetes sin cargar o cargados en desorden (search path)
- operadores cambiados, signos
- espacios, par√©ntesis, o comas de m√°s o de menos
- pasos en desorden

## Opciones √∫tiles
- Estudiar los mensajes de error m√°s comunes

::::{.rightref}
:::{.refbox}
Emily Jennings-Dobbs (2021)\
[Common Errors in R](https://jtr13.github.io/cc21/common-errors-in-r.html)
:::
::::

- Correr los ejemplos disponibles con la ayuda y comparar con nuestro c√≥digo


# Buscando ayuda

## Otras personas

Foros 

Grupos de usuarios locales o de RLadies

[StackOverflow](https://stackoverflow.com/)

Redes sociales  

[GitHub](https://github.com/) - issues (cerrados o abiertos)

 - üßê Modales!

## B√∫squedas web

Nadie sabe todo de memoria y hay que saber buscar en l√≠nea

- Aprender a usar funciones avanzadas en los buscadores populares ["Google-fu"](https://tryhackme.com/resources/blog/google-fu) 

- Conocer la terminolog√≠a general\
    [*"R subset rows partial match"*]{style="color: orange"}

- Hacer b√∫squedas amplias (ej: no buscar partes de un mensaje que error que a nadie m√°s le aparecer√≠an)

[Error: object 'tesis_luis_23w-final' not found]{style="color: red; font-family: monospace"}

## ¬øCu√°les soluciones son ~~mejores~~ √∫tiles?

- ¬øHace falta limitar los resultados temporalmente?

- Soluciones para diferentes dialectos\
    [Sort (order) data frame rows by multiple columns](https://stackoverflow.com/questions/1296646/sort-order-data-frame-rows-by-multiple-columns)\
    (StackOverflow - 2009, 1.4 M visitas)

# Discusi√≥n

