---
title: "Flujos de trabajo y an√°lisis"
author: Luis D. Verde Arregoitia
format:
  revealjs:
    theme: curso_styles.scss
    transition: fade
    progress: true
    preview-links: true
    hide-inactive-cursor: true
    highlight-style: a11y
    pause: true
editor: source
knitr:
  opts_chunk:
    dev: "ragg_png"
    retina: 3
    dpi: 200
execute:
  freeze: auto
  cache: true
  echo: true
  fig-width: 5
  fig-height: 6
---

```{r packages setup}
#| echo: false

library(fontawesome)

```

## Temas de este bloque

* Organizaci√≥n de proyectos y archivos\
* Buenas pr√°cticas para nombrar archivos y objetos\
* Trabajando con rutas\
* Objetos\
* Repaso
* Exploraci√≥n r√°pida de datos


##

![](imgs/rake.jpg){fig-align="center"}


## ¬øQu√© es `r fontawesome::fa(name = "r-project")`?

‚úçÔ∏èSoftware

. . .

¬øDialecto de S?\
¬øPaquete estad√≠stico?\
¬øRStudio?\
¬øEmpresa?\
¬øLenguaje de programaci√≥n?\
¬øDispositivo gr√°fico?

## `r fontawesome::fa(name = "r-project")`?

::: columns
::: {.column width="50%"}
‚úçÔ∏èüßë‚ÄçüéìVentajas
:::

::: {.column width="50%"}
‚úçÔ∏èüßë‚ÄçüéìDesventajas
:::
:::

## Este curso


- Instalaciones locales
- RStudio
- Dialecto `tidyverse`
- Enfoque en c√≥digo
- Pipes

## Mi sistema

-   R v4.3.3

-   RStudio 2023.12.1

-   Sin personalizaciones visuales

-   Linux Mint 21.3

## `r fontawesome::fa(name = "r-project")` no es RStudio

**IDE** - Entorno de desarrollo integrado

Herramientas para facilitar el uso de un lenguaje de programaci√≥n

-   Editor de texto que 'reconoce' la sintaxis de un lenguaje

-   Atajos y herramientas para administrar y ejecutar c√≥digo

## 

![https://rstudio.github.io/cheatsheets/rstudio-ide.pdf](imgs/IDEcsheet.png)

## Otras opciones

 - RStudio\
- Emacs + ESS (https://ess.r-project.org)\
- vim + Nvim-R: ([Turn Vim Into an IDE for R](https://medium.com/free-code-camp/turning-vim-into-an-r-ide-cd9602e8c217))\
- Visual Studio + [RTVS](https://docs.microsoft.com/en-us/visualstudio/rtvs)
- Cualquier editor de [texto](https://web.archive.org/web/20151108031733/http://www.sciviews.org/_rgui/projects/Editors.html) (enviando l√≠neas o selecciones a una instancia de R)

## 

![R. Geert van den Berg [SPSS Tutorials] ](https://spss-tutorials.com/img/spss-data-editor-data-view.png)

##
::: columns
::: {.column width="50%"}
![https://speakerdeck.com/jennybc/spreadsheets](imgs/moonscape.jpeg)
:::

::: {.column width="50%"}
"spreadsheets: a dystopian moonscape of unrecorded user actions"

-Gordon Shotwell


:::
:::

::::{.rightref}
:::{.refbox}
Spreadsheets  

Jenny Bryan (2016)
:::
::::

## Scripts y c√≥digo fuente

::: columns
::: {.column width="40%"}
![](imgs/pancks.png)
:::

::: {.column width="60%"}
Reproducir y modificar pasos

Encontrar errores

Documentar el proceso

Examinar c√≥digo ajeno
:::
:::

## üì¶ Paquetes
\
\
Al instalar R instalamos:

`base`: las funciones fundamentales de R
\
\
`list()`\
`log()`\
`cat()` `rm()` etc...

## üì¶ Paquetes

Otros componentes de R-base:\
`utils, stats, datasets, graphics, grDevices, grid, methods, tools, parallel, compiler, splines, tcltk, stats4`

Paquetes 'recomendados' (se instalan con R pero no se cargan autom√°ticamente)

`boot, class, cluster, codetools, foreign, KernSmooth, lattice, mgcv, nlme, rpart, survival, MASS, spatial, nnet, Matrix`

## üì¶ Paquetes Adicionales

-   \>19,000 en [CRAN](https://cran.r-project.org/) (The Comprehensive R Archive Network)

-   muchos m√°s en GitHub, GitLab, Bitbucket, Bioconductor, etc.

- crear uno propio


Se instalan desde R con:

`install.packages()` para paquetes de CRAN\
`üì¶ remotes` o `pak` para todos los dem√°s repositorios

## Visita guiada por R y RStudio{background-color="#a4c5ff"}

-   Ejecutar R

-   Ejecutar RStudio

-   Instalar algunos paquetes para hoy:

```{r}
#| eval: false
#| echo: true
install.packages("ggplot2")
install.packages("dplyr")
install.packages("readr")
install.packages("tidyr")
install.packages("fs")
install.packages("here")
```

## Sistemas de archivos

::: columns
::: {.column width="33%"}
![](imgs/filenotfound.png) Monica Chin (2021)\
[File not Found](https://www.theverge.com/22684730/students-file-folder-directory-structure-education-gen-z)
:::

::: {.column width="33%"}
![](imgs/filesfolders.png) Jody Macgregor (2021)\
[PC Gamer](https://www.pcgamer.com/students-dont-know-what-files-and-folders-are-professors-say/)
:::

::: {.column width="33%"}
![](imgs/fsmeme.png)
:::
:::

##  {background-image="imgs/escritorioadri.png"}

## Directorios, rutas y nombres

::: columns
::: {.column width="33%"}
![](imgs/file-system.jpg)
:::

::: {.column width="66%"}
Guardar archivos en ubicaciones espec√≠ficas, con nombres intencionales y √∫tiles

- Nombres cortos e informativos

- F√°ciles de ordenar y que cooperen con b√∫squedas parciales

- Atenci√≥n con caracteres especiales y espacios
:::
:::

## Nombres

- Palabras que existen en el diccionario

- Abreviaciones conocidas

- No nombrar solo con n√∫meros

- Entre 2 y 4 palabras

::::{.rightref}
:::{.refbox}
[What Science Says About Naming](https://www.felienne.com/archives/5452)  
Felienne Hermans

:::
::::

## Nombres

::: columns
::: {.column width="40%"}
### OK

`max_temp` </br>\
</br> `prec_min_usd`\
`temp_mensual`
:::

::: {.column width="60%"}
### No tanto

`temperatura_maximaC2014`\
`max`\
`temp`\
`'Precio M√≠nimo ($) USD'`\
`'Temperatura/Mes (¬∞F)'`\
</br>
:::
:::

::::{.rightref}
:::{.refbox}
Jenny Bryan (2015)\
[Naming Things](https://speakerdeck.com/jennybc/how-to-name-files)
:::
::::

## Nombres

::: columns
::: {.column width="60%"}
### OK

`01_factura-marzo2023.pdf`\
`02_factura-julio2023.pdf`\
`ms_helechos_20210412.docx`
:::

::: {.column width="40%"}
### No tanto

`descarga5462.pdf`\
`juliocompraluis.pdf`\
`borrador.docx`\
:::
:::

En R los nombres v√°lidos solo pueden llevar letras, n√∫meros, puntos, y guiones; no pueden comenzar con n√∫meros


## Esquemas de may√∫sculas/min√∫sculas y espacios

</br>

**camelCase** - la segunda palabra en adelante con may√∫scula, sin espacios 

**snake_case** - solo min√∫sculas, gui√≥n bajo entre palabras  

**slug-case** - solo min√∫sculas, gui√≥n entre palabras  

---

</br></br>
**Title Case** - May√∫sculas excepto en art√≠culos, con espacios

**Sentence case** - Primera palabra con may√∫sculas, con espacios
</br>
</br>
Podemos transformar cadenas de texto de un esquema a otro con el paquete üì¶`snakecase`

## Organizaci√≥n de proyectos

**Proyecto:** Directorio con todo los archivos relevantes para alg√∫n trabajo

### Separar:

üìÅ Datos (o c√≥digo para cargarlos desde fuentes remotas)\
üìÅ *Scripts* de an√°lisis y/o visualizaci√≥n\
üìÅ Salidas (figuras, informes, datos intermedios, etc.)
  
  
  \
  
::::{.rightref}
:::{.refbox}
::: columns
::: {.column width="50%"}
Jenny Bryan (2017)\
[Project-oriented workflow](https://www.tidyverse.org/blog/2017/12/workflow-vs-script/)
:::

::: {.column width="50%"}
Ma√´lle Salmon (2021)\
[Draw me a project](https://masalmon.eu/2021/06/30/r-projects/)
:::
:::
:::
::::



## Proyectos en RStudio

::: columns
::: {.column width="35%"}
![](imgs/rprojects.png)
:::

::: {.column width="65%"}
-   Instancia de R dedicada

-   Navegador apuntando al directorio del proyecto

    -   bot√≥n para regresar al dir. del proyecto

-   Dir. de proyecto establecido como Dir. de Trabajo

    -   rutas relativas al Dir. de Proyecto
:::
:::

## Ejercicio{background-color="#a4c5ff"}

Crear un proyecto para el curso en RStudio 

</br>

- en alguna ubicaci√≥n f√°cil de encontrar (ej. Escritorio) 
- "curso-R-biodiversidad" como nombre  

> Los proyectos en OneDrive pueden no funcionar correctamente

## 

![](imgs/ubereats.png){fig-align="center"}

## üì¶ `fs`

Trabajando con el sistema de archivos (cualquier plataforma)

`fs` siempre trabaja con rutas ordenadas

-   '**`/`**' para delimitar carpetas\
-   Sin '**`/`**' dobles o extras

Crear directorios\
Mover archivos\
Copiar archivos\
Cambiar nombres

## Ejercicio{background-color="#a4c5ff"}

-   Crear nuevas carpetas en el directorio del proyecto
    -   datos
    -   salida
    -   R

### Los paquetes ya instalados se cargan con la funci√≥n `library()`

```{r}
#| eval: false
#| echo: true
library(fs)
```

## Crear nuevas carpetas en el directorio del proyecto

```{r}
#| eval: false
dir_create("R")
dir_create("datos")
dir_create("salida")
dir_ls()
```

> Todo esto tambi√©n se puede hacer desde el navegador de RStudio, la terminal, o el explorador del sistema operativo

## Guardar la fuente y no el entorno

::: columns
::: {.column width="40%"}
<img src="imgs/pancks.png"/>
:::

::: {.column width="60%"}
-   Exportar figuras y resultados a archivos

-   Evitar `rm(list = ls())`.

-   'Hoja en blanco' & reiniciar R seguido

::::{.rightref}
:::{.refbox}
Jenny Bryan & Jim Hester (2020)\
[What they forgot to teach you about R](https://rstats.wtf/save-source.html)\
Jenny Bryan (2018)\
[Zen And The aRt Of Workflow Maintenance](https://speakerdeck.com/jennybc/zen-and-the-art-of-workflow-maintenance)
:::
::::

:::
:::

## Hoja en blanco (blank slate)

::: columns
::: {.column width="60%"}
- No se guarda el espacio de trabajo a un archivo _.Rdata_

- No se carga el espacio de trabajo desde un archivo _.Rdata_ al arrancar R

:::

::: {.column width="40%"}

![](imgs/clnslt.jpg)

:::
:::



## Reiniciar R

### `Ctrl+Shift+F10`
(Windows y Linux)

### `Command+Shift+F10`    
(Mac)

## üì¶ `here` y rutas relativas

`F:\PC de Luis\ruta\que\solo\tengo\mi-proyecto\analisis\script1.R`

Trabajemos en relaci√≥n a la ra√≠z del proyecto con la funci√≥n `here()`

-   resuelve cu√°l es la ra√≠z del proyecto
-   construye rutas port√°tiles
-   genera rutas absolutas (comienzan con `/`, `C:\` o `\\`)

::::{.rightref}
:::{.refbox}
[Ode to the here package (2018)](https://github.com/jennybc/here_here)
:::
::::

## 

Si la ra√≠z del proyecto es `mi-proyecto`

```{r}
#| eval: false
#| echo: true
here("analisis","script1.R")
```

construye:

`F:\PC de Luis\ruta\que\solo\tengo\mi-proyecto\analisis\script1.R`

---

</br>

`here()` no cambia el directorio de trabajo, solo construye rutas  
</br>
`here()` resuelve cu√°l es la ra√≠z de un proyecto (i.e. d√≥nde est√° el archivo `.Rproj`?) y las rutas son relativas a √©sto

</br>

::::{.rightref}
:::{.refbox}
How to use the here package [(2018)](http://jenrichmond.rbind.io/post/how-to-use-the-here-package)
:::
::::

##

Construir rutas:

:::{.big-code}
```{r}
library(here)
here("carpeta ficticia","subcarpeta","tesis-terminada.doc")
```
:::

## Importando archivos (tablas)

-   Con el bot√≥n "*Import Dataset*"
-   Con alguna funci√≥n `read`

## Necesitamos:

- alguna funci√≥n para importar
- ruta del archivo 
- nombre del objeto que vamos a crear a partir del archivo
- argumentos adicionales para controlar la lectura del archivo

##

```{r}
#| eval: false
#| echo: true

mi_tabla <- read.csv(file = "mi_ruta/mi-archivo.csv",
                     header = TRUE) 

```


`mi_tabla` - objeto que creamos  
`read.csv()` - funci√≥n para leer archivos de texto  
`file = "mi_ruta/mi-archivo.csv"` - ruta del archivo  
`header = TRUE`  argumento adicional (especifica si hay encabezado)


## `readr` y `readxl`

Paquetes adicionales para importar datos rectangulares desde archivos de texto y hojas de c√°lculo

-   Menos errores al importar

-   Mayor flexibilidad al leer archivos

-   Lectura m√°s r√°pida

-   Funciones adicionales para limpiar los valores en las columnas

## Ejercicio{background-color="#a4c5ff"}

Importar una tabla a R desde un archivo

## Hojas de c√°lculo

- ~ 1000,000,000 usuarios a nivel mundial
- Formatos `xlsx`, `xls`, `ods` y en l√≠nea (Google sheets)

::: columns
::: {.column width="50%"}
![[Registro de pr√©stamos 1593](https://librarysearch.temple.edu/catalog/991029783589703811)](imgs/rome.jpg){width="40%"}
:::

::: {.column width="50%"}
![[VisiCalc](https://en.wikipedia.org/wiki/VisiCalc)](imgs/Visicalc.png){width="70%"}
:::
:::

> Podemos trabajar en R con todos estos formatos 

## Ejercicio{background-color="#a4c5ff"}

Con `readxl`:  

Importar las hojas del archivo `mascoteria.xlsx` 

### Argumentos √∫tiles

- `path`
- `sheet` 
- `skip`

# Estructuras de datos

## Principios de programaci√≥n en R

</br>

Todo lo que existe es un *objeto*

</br>
Todo lo que ocurre lo hace una **funci√≥n**\
(*Las funciones son objetos*)

</br>
Las **funciones** (generalmente) viven en paquetes

## Objetos

-   Tablas con filas y columnas

-   Modelos

-   Listas

-   Gr√°ficos

> Todos los objetos tienen clases y atributos y hay distintas formas de crearlos

## 

::: columns
::: {.column width="50%"}

### Vectores

![](imgs/vector.png)

### Listas

![](imgs/listhad.png)
:::

::: {.column width="50%"}
### Tablas

![](imgs/dataframe.png)
:::
:::


## Vectores

N√∫meros

:::{.big-code}
```{r}
c(1,2,3,4)
```
:::
</br>

:::{.big-code}
```{r}
c(22.1,0.006,4.1)
```
:::

## Vectores

Caracteres

:::{.big-code}
```{r}
c("perro","gato","rata","B")
```
:::

## Vectores

L√≥gicos (verdadero/falso)

:::{.big-code}
```{r}
c(TRUE,FALSE,FALSE,FALSE,TRUE)
```
:::
---

![](imgs/logical.jpg)

---

![](imgs/logicalNA.jpg)

## Creando objetos

:::{.big-code}
```{r}
x <- c(1, 2, 3)
```
:::

Funci√≥n `c()` para juntar elementos en un vector

:::{.med-code}
```{r}
x <- c(1,2,3)
y <- c("a","G","h")
```
:::

:::{.med-code}
```{r}
x
y
```
:::


## Los objetos tienen clases

:::{.big-code}
```{r}
#| echo: true
#| eval: true
class(x)
class(y)
```
:::


## Los vectores solo pueden tener objetos de la misma clase

:::{.big-code}
```{r}
c(1,"a",2)
```
:::

Al combinar caracteres y n√∫meros hay conversi√≥n autom√°tica

## Vectores num√©ricos

![](imgs/numeric.jpg)

## Factores

::: columns
::: {.column width="40%"}
![](imgs/factor.jpg)
:::

::: {.column width="60%"}
- Representan datos categ√≥ricos

- Las etiquetas de cada valor se conocen como niveles, que pueden o no llevar un orden espec√≠fico

- Crear con `factor()`
:::
:::

## Factores

:::{.med-code}
```{r}
#| eval: true
#| echo: true
factor(c("perro","gato","ave","ninguno",
         "perro","ninguno","perro","perro",
         "gato","ave","perro"))
```
:::

## Dos o m√°s vectores del mismo largo...

</br>

::: columns
::: {.column width="40%"}
![](imgs/dataframe.jpg)
:::

::: {.column width="60%"}
### ¬°Data frame!

- Objeto tabular con filas y columnas

- Puede almacenar objetos de distintas clases en las columnas

- Nombres para cada columna
:::
:::

## Data frames


Se crean importando un archivo tabular o con `data.frame()`

:::{.med-code}
```{r}
#| eval: true
#| echo: true
mi_tabla <- 
data.frame(id=c("rana","pez","nutria","gusano"),
           ind_g=c(12,15,13,10),
           listo=c(TRUE,TRUE,FALSE,TRUE))

```
:::

-   cada vector es una columna
-   nombres de columnas sin comillas
-   mismo largo para todos los vectores

## 
:::{.big-code}
```{r}
#| eval: true
#| echo: true
mi_tabla
```
:::

# ¬øDudas?
