---
title: "Matrices en Ecología"
author: "Gabriel Massaine Moulatlet"
institute: Instituto de Ecología, A.C.
format:
  revealjs:
    slide-number: true
    embed-resources: true
editor: visual
highlight-style: arrow-light
---

```{r}
#| echo: false
#| eval: true
#| message: false
library(here)
```

# Matrices


## Matrices

![](https://i.imgflip.com/lnf8o.jpg)

## 

-   Es el formato más comun de representación de datos ecológicos
-   Más popular en ecología con el desarollo de mejores computadoras
-   Gran parte del lenguaje de los softwares está basada en notaciones de matrices

## Son muy usadas en los análisis de ecologia

-   Análisis multivariados en ecologia de comunidades
-   Para resumir grandes conjuntos de datos
-   Comunes en macroecología (matriz de presencia-ausencia)
-   Correlación entre variables

## Matrices en R

-   `matrix()`vs. `data.frame()` vs. `array()`
-   `matrix()`: solo numeros o solo caracteres
-   `data.frame()`: mix de tipos numeros y caracteres
-   `array()` son *n*-dimensionales

## Estructura de la matriz

-   Una matriz es un tipo especial de `array()`
-   Una matriz tiene 2 dimensiones, formadas por filas y columnas

```{r}
#| eval: true
#| echo: true

matrix(data=NA, nrow = 2, ncol=2)

```

## Diferencias entre `matrix()` y `array()`

```{r}
#| eval: true
#| echo: true

a <- matrix(1:6, ncol = 3, nrow = 2)
b <- array(1:12, c(2, 3, 4))
```

##

::: columns
::: {.column width="50%"}
```{r}
#| eval: true
#| echo: true
a <- matrix(1:6, ncol = 3, nrow = 2)
a
```
:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: true
b <- array(1:12, c(2, 3, 4))
b
```
:::
:::

## Argumentos de la función `matrix()`

-   *dimnames*
-   Una lista con los nombres de las filas y de las columnas, respectivamente

```{r}
#| eval: true
#| echo: true

matrix(data=NA, nrow = 2, ncol=2,dimnames = list(c("row1","row2"),
                                                 c("col1", "col2")))
```

## Llenado de matriz

-   *byrow*
-   Define como se da el llenado de la matrix
-   Si `byrow=T`, el llenado se da por filas

```{r}
#| eval: true
#| echo: true
vec = c("a","b","c","d","e","f")
matrix(vec, nrow = 3, byrow = T )
```

## Si `byrow=F`, el llenado se da por columnas

```{r}
#| eval: true
#| echo: true
vec = c("a","b","c","d","e","f")
matrix(vec, nrow = 3, byrow = F )
```

## `diag()`

-   Es la función para extraer la diagonal de una matriz

```{r}
#| eval: true
#| echo: true
a <- matrix(1:6, ncol = 3, nrow = 2)
a
diag(a)
```

# Algebra de matrices

## La matriz

![](imgs/matrix.jpg)

## Diferentes tipos de matrices

-   Cuadrada (número de filas igual al numero de columnas)
-   Diagonal (todos valores además de las diagonal son ceros)
-   Triangular (valores en cero en una de las mitades)
-   Identidad (valores de la diagonal son 1 y los demás, 0)
-   Escalar (valores de la diagonal son iguales y los demás, 0)

##

![](imgs/matrices.png)


## Operaciones con matrices: Sumatoria

```{r}
#| eval: true
#| echo: true
 a <- matrix(1:9, nrow=3)
 b <- diag(rep(1,3))

 a
 b

```

##

```{r}
#| eval: true
#| echo: true
 a <- matrix(1:9, nrow=3)
 b <- diag(rep(1,3))

 a + b

```

## Operaciones con matrices: Diferencia

```{r}
#| eval: true
#| echo: true
 a <- matrix(1:9, nrow=3)
 b <- diag(rep(1,3))
 a
 b

 a - b
```

## Operaciones con escalares

::: columns
::: {.column width="50%"}
```{r}
#| eval: true
#| echo: true
 a <- matrix(1:9, nrow=3)
 d <- c(0,0,1)
a
d
```

```{r}
#| eval: true
#| echo: true
a + d
```
:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: true
 a <- matrix(1:9, nrow=3)

 a + 1

```
:::
:::

## pero...

::: columns
::: {.column width="50%"}
-   a + b y a + b2 son iguales?

```{r}
#| eval: true
#| echo: true

 a <- matrix(1:9, nrow=3)
 b <- 1
 a
 a + b
```
:::

::: {.column width="50%"}
- Y esta suma, ¿sale bien?

```{r}
#| eval: false
#| echo: true
 a <- matrix(1:9, nrow=3)
 b2 <- matrix(b, nrow=1)
 b2
 a + b2
```
:::
:::

## Multiplicación de matrices

-   El comando `%*%` se aplica par las multiplicaciones

```{r}
#| eval: true
#| echo: true

a <- matrix(1:4, nrow=2)
b <- diag(rep(1,2))
d <- matrix(c(0,1), nrow=2)
a
b
d
```

## 

```{r}
#| eval: true
#| echo: true

a <- matrix(1:4, nrow=2)
b <- diag(rep(1,2))
d <- matrix(c(0,1), nrow=2)

 a %*% b # ¿Salió bien?
```

## 

```{r}
#| eval: true
#| echo: true

a <- matrix(1:4, nrow=2)
b <- diag(rep(1,2))
d <- matrix(c(0,1), nrow=2)

 a %*% d # ¿esta?
```

## 

```{r}
#| eval: false
#| echo: true

a <- matrix(1:4, nrow=2)
b <- diag(rep(1,2))
d <- matrix(c(0,1), nrow=2)

 d %*% a # ¿y esta?
```

## La división de matrices no existe, se las multiplica por su inverso

![](imgs/invma.png)

## la función `det()`

- Para calcular el inverso es necesario conocer el *determinante*
```{r}
#| eval: true
#| echo: true

a <- matrix(1:4, nrow=2)
a
(1*4) - (3*2)

```

##
```{r}
#| eval: true
#| echo: true

d <- det(a)
d

```

##
- Dividir cada elemento de la matriz inversa por por el determinante

```{r}
#| eval: true
#| echo: true

inva <-  matrix(c(4,-3,-2,1), nrow=2)
inva

(4/det(a))
(-3/det(a))
(-2/det(a))
(1/det(a))

```

##
-   La función `solve()` calcula el inverso
-   No confundir con `t()`, que es la función para transponer la matriz

```{r}
#| eval: true
#| echo: true

a <- matrix(1:4, nrow=2)
ainv <- solve(a)
ainv

```
## 
```{r}
#| eval: true
#| echo: true
a %*% ainv
```

## QUIZ

-   Un pesticida tiene 2 compuestos tóxicos I y II que se acumulan en 3 especies de plantas A, B y C

```{r}
#| eval: true
#| echo: true
M = matrix(c(2,3,4,0,1,2), nrow=2,ncol=3,byrow=T,
           dimnames = 
             list(c("I","II"),
             c("A", "B","C")))
M
```

## 

-   Si un herbívoro se alimenta de estas 3 especies en las seguientes cantidades por día:

```{r}
#| eval: true
#| echo: true

N = matrix(c(5,3,1), nrow=3,ncol=1,byrow=F,
           dimnames = list(c("A","B","C")))

N
```

## 

-   ¿Cuántos contaminantes I y II consume diariamente?
-   Tip: Mirar el producto de M x N

```{r}
#| eval: true
#| echo: true
M = matrix(c(2,3,4,0,1,2), nrow=2,ncol=3,byrow=T,
           dimnames = list(c("I","II"),
                                                                   c("A", "B","C")))
N = matrix(c(5,3,1), nrow=3,ncol=1,byrow=F,
           dimnames = list(c("A","B","C")))
```

. . .

```{r}
M%*%N
```

# Tipos de matriz en R

## *Sparse* vs. *Dense* matrices

-   paquete `Matrix`
-   [Documentación](https://ocw.mit.edu/courses/18-335j-introduction-to-numerical-methods-spring-2019/bcd746dca8cbf0d5a890f01a72d8ef64_MIT18_335JS19_lec24.pdf)

![](imgs/sparse_dense.gif){fig-align="center"}

## *Sparse* vs. *Dense* matrices

-   Funciones aplicadas a ambos tipos de matrices producen los mismos resultados
-   Ventajas en el tiempo de procesamiento de datos

## 

::: columns
::: {.column width="50%"}
-   `Dense`

```{r}
#| eval: true
#| echo: true

M <- matrix(10 + 1:28, 4, 7) # crear matrix
M <- cbind(-1, M) # poner una columna con -1
M[2, c(2,4:6)] <- 0 # agregar unos ceros
M <- rbind(0, M, 0) #agregar más ceros
M[1:2,2]  <- NA # agregar NAs
M[2:6,8]  <- 0 # agregar otros ceros
M
```
:::

::: {.column width="50%"}
-   `Sparse`

```{r}
#| eval: true
#| echo: true
library(Matrix)

sM <- as(M, "sparseMatrix")
sM
```
:::
:::

## En ecología de comunidades

-   Matrices son usadas para guardar los elementos de analisis de diversidad
-   Tiene muchos ceros (presencia-ausencia)
-   R tiene que guardar cada valor en matrices del tipo *dense*
-   Matrices del tipo *sparse* no guardan los ceros

## Funciones útiles en el paquete `phyloregion`

-   Para datos de comunidades (sitios x species)
-   [Phyloregion](https://besjournals.onlinelibrary.wiley.com/doi/full/10.1111/2041-210X.13478g)

## 

![](imgs/phylo.jpg)

## Matrices de distancia

-   Pueden ser transformadas en objetos de distancias `dist()`
-   Por defecto calcula distancias euclidianas 

```{r}
#| eval: true
#| echo: true
x <- matrix(1:6, nrow = 3)
dist(x)

```

##

```{r}
#| eval: true
#| echo: true

class(x)
```

## Funciones del paquete `vegan()`

-   Análisis comunes en ecología de comunidades usan el formato *dist*
-   [vegdist()](https://www.rdocumentation.org/packages/vegan/versions/2.6-4/topics/vegdist)

```{r}
#| eval: true
#| echo: true
library(vegan)

data(varespec)

vare.dist <- vegdist(varespec)
vare.dist
```

## Transformar objetos `dist()` en objetos de formato *ancho*


```{r}
#| eval: true
#| echo: true
library(tidyr)
library(tidyverse)

x <- matrix(1:6, nrow = 3)
dx = dist(x)

```

##
```{r}
#| eval: true
#| echo: true
dx |> 
  as.matrix() |> 
  as.data.frame() |> 
  mutate(sites = c("1","2","3")) |> 
  pivot_longer(cols = c(1:3),
               names_to = "sites2",
               values_to = "distances") |> 
  
  head()

```


# Visualización de matrices

## Visualizar datos crudos

![](imgs/warton.png)

## Uso de gráficos *genéricos*

-   A partir de una matriz de species x sitios
-   Nos permiten visualizar patrones de la comunidad
-   Asociar los patrones a teorias ecológicas

## Gausch 1982

![](imgs/DA4.png)

## Hacer gráficos genéricos

![](imgs/DA.png)

## Uso de análisis de gradientes (in)directos

![](imgs/DA2.png)

## Interpretación de los resultados

![](imgs/DA3.png)

## Cálculo de gradiente directo

![](imgs/DA5.png)

## Ejemplo usando dados de abundancia de moluscos

-   Importar el archivo `moluscos.txt`

```{r}
#| eval: true
#| echo: true
library(readr)
library(here)
moluscos = read_table(file=here("dados","moluscos.txt"))


# importar los datos ambientales
ambi = read_table(file=here("dados","ambi.txt"))

```
## Editar la tabla de moluscos, quitar la columna "sites"

```{r}
#| eval: true
#| echo: true
library(tidyverse)

moluscos <- 
  moluscos |> 
    select(c(sp1:sp6))
moluscos

```


## calcular las medias

-   Usar el gradiente de precipitacion

```{r}
#| eval: true
#| echo: true

molu.medias <-colSums(moluscos*ambi$lluvia)/colSums(moluscos)

```

-   Ordenar las filas de acuerdo con el gradiente ambiental y con las medias

```{r}
#| eval: true
#| echo: true


molu.ord<-moluscos[order(ambi$lluvia,decreasing=F),]
molu.ord1<-molu.ord[,order(molu.medias,decreasing=T)]

```

## Visualizar


-   Algunos ajustes..
```{r}
#| eval: true
#| echo: true

ambi2 <- ambi[order(ambi$lluvia,decreasing=F),]

molu.ord2 <- cbind(molu.ord1,ambi2)

```

##
-   Qué vemos en la gráfica abajo? Hay algun patrón?
```{r}
#| eval: true
#| echo: true

molu.ord2 |> 
  pivot_longer(cols = c(sp1:sp6)) |> 
  ggplot(aes(x=factor(lluvia),y=fct_rev(name),size=ifelse(value==0,NA,value)))+
  geom_point(shape=15)
```


## Otras opiciones de gráficos genéricos

-   Ver el github de Cristian Dambros, de la UFSM-BRA
-   La función [poncho](https://raw.githubusercontent.com/csdambros/R-functions/master/poncho.R)
-   para llamar la función directamente a su script usar: source("https://raw.githubusercontent.com/csdambros/R-functions/master/poncho.R")

## 

![](imgs/poncho.png)

## Cuando no hay variables ambientales

-   Igual se pueden ordenar las matrices para visualizar los patrones
-   *Indirect* gradient analysis
-   De este tipo se análisis se derivan técnicas más complejas como RA, CA y PCA

## En Resumen

![](imgs/whatever.jpg)

## No, voy en serio!

-   La matriz es una de los formatos esenciales para los analisis ecológicos
-   Manejar y visualizar información de matrices puede revelar informaciones importantes de los datos incluso antes de los análisis
