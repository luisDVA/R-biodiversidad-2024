---
title: "Filogenias en R"
author: Axel Arango & Fabricio Villalobos & Juliana Herrera
format: revealjs
---

## Filogenias en R

```{r}
#| echo: false
library(ape)
library(dplyr)

```
. . .
Primero, ¿Qué es un árbol Filogenético?

. . .

-   Un árbol filogenético es un diagrama que muestra la relación de parentesco entre especies (o taxones)

-   Uno de los formatos más utilizados para representar filogenias son el *Newick*(.tree)

-   El formato Newick es una notación para representar parentescos utilizando paréntesis y comas.


## 

-   Si queremos decir que A y B se parecen más entre ellos que con X, lo anotaríamos así:

```{r prueba newick}
#| eval: true
#| echo: true

"((A,B),X);"
```

## 

Para que *R* pueda identificar está notación, se puede usar `ape`:

```{r newick}
#| echo: true
#| eval: true

library(ape)
read.tree(text="((A,B),X);") %>% plot()
```

## 

El formato Newick es anidado, por lo que podemos explorar la relación entre diferentes grupos. Por ejemplo:

Sabemos que los lobos, los coyotes y los zorros pertenecen a Canidae, pero que los lobos y los coyotes son del mismo género

```{r}
#| eval: true
#| echo: true
Canidae <-"(Vulpes_vulpes,(Canis_lupus,Canis_latrans));"
read.tree(text=Canidae) %>% plot()

```

## 

Y si agregamos murciélagos, todos ellos pertenecen a los mamíferos:

```{r}
#| echo: true
#| eval: true
#| label: murcis


Mammalia <-"(Desmodus_rotundus,(Vulpes_vulpes,(Canis_lupus,Canis_latrans)));"
read.tree(text=Mammalia) %>% plot()
```

## 

Si quisiéramos agregar cuervos y zanates. ¿Estos dónde irían?

```{r}
#| label: zan
#| echo: true
#| eval: true

tetrapoda<-"((Quiscalus_mexicanus,Corvus_corax),(Desmodus_rotundus,(Vulpes_vulpes,(Canis_lupus,Canis_latrans))));"

read.tree(text=tetrapoda) %>% plot()
```

## 

Y si agregamos una planta, los mamíferos y las aves se anidarían.

```{r}
#| eval: true
#| echo: true
#| label: planta

Eukarya<-"(Sideroxylon_celastrinum,((Quiscalus_mexicanus,Corvus_corax),(Desmodus_rotundus,(Vulpes_vulpes,(Canis_lupus,Canis_latrans)))));"

Nktree<-read.tree(text=Eukarya) 
plot(Nktree)
```

## 

-   En este ejercicio haremos uso del paquete `ggtree` para graficar, personalizar, anotar y en general mejorar árboles filogenéticos

## Paquetes necesarios:

```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false

library(ape)
library(ggtree)
library(deeptime)
library(tidytree)
library(ggimage)
library(geiger)
library(caper)
library(TDbook)
library(here)
```

## Filogenia *Pimelodidae*

En este ejercicio utilizaremos una filogenia con las especies del Orden Siluriforme a las cuales se le conoce su tipo de migración. Esto es un subset de la Megafilogenia para peces propuesta por Rabosky (2018)

```{r}
#| eval: true
#| echo: true

fishtree <-read.tree(here("data","treefish.txt"))
fishdata<-read.table(here("data","DataFish.txt"))

```

## 

Veamos esta filogenia graficándola, usando `ape`, la manera base para R.

```{r, fig.width=4, fig.height=5,fig.align='center'}
#| eval: true
#| echo: true

plot(fishtree, show.tip.label=F)
```

## 

Ahora graficaremos el mismo árbol utilizando ggtree, el cual sigue una formula idéntica a la de ggplot. Nuestro árbol base se llamará **p1**:

```{r, fig.width=4, fig.height=5,fig.align='center'}
#| eval: true
#| echo: true

p1<-ggtree(fishtree,color="black",size=0.5)
plot(p1)
```

## 

Con **p1**, al igual que con cualquier otro gráfico de `ggplot`, podemos agregar parámetros gráficos para personalizar o agregar anotaciones a nuestra filogenia. Primero empezaremos con los parámetros de personalización. Por ejemplo, podemos cambiar la disposición de la filogenia utilizando el parámetro `layout_`:

## 

```{r}
#| eval: true
#| echo: true

p1+layout_dendrogram()+
p1+layout_fan()+
p1+layout_circular()
```

## 

También podemos cambiar el color del fondo del gráfico

```{r, fig.width=4, fig.height=5,fig.align='center'}
#| eval: true
#| echo: true
p1+  theme_tree(bgcolor="gray")
```

## Etiquetas y formas en tips

Agregar las etiquetas para las puntas de una manera personalizable:

```{r, fig.width=4, fig.height=5,fig.align='center'}
#| eval: true
#| echo: true
p1+xlim(NA, 110)+geom_tiplab(size=2,color="red",angle=0)
```

## 

formas a las puntas:

```{r, fig.width=4, fig.height=5,fig.align='center'}
#| eval: true
#| echo: true
p1+geom_tippoint(size=3,color="black",fill="skyblue",shape=21)
```

## Etiquetasy formas en nodos

Etiquetas a los nodos:

```{r, fig.width=4, fig.height=5,fig.align='center'}
#| eval: true
#| echo: true

p1+geom_nodelab(aes(label=node),size=2,color="blue", hjust=-0.6)+
  geom_nodelab(aes(subset = (node == 109), label = "*"),color = "red",size=10,hjust=1)

                                                    
```

## 

o formas a los nodos:

```{r, fig.width=4, fig.height=5,fig.align='center'}
#| eval: true
#| echo: true
p1+geom_nodelab(aes(label=node),size=2,color="blue", hjust=-0.6)+ geom_nodelab(aes(subset = (node == 109), label = "*"),color = "red",size=10,hjust=1)+
  geom_nodepoint(size=2,color="red",fill="black",shape=21)
```

## Escalas temporales

e incluso agregar una escala temporal a la filogenia, con la ayuda del paquete `deeptime`

```{r, fig.width=4, fig.height=5,fig.align='center'}
#| eval: true
#| echo: true

py<-revts(p1)
py+ geom_tiplab(size=2,color="black",angle=0)+xlim(-100,30)+ylim(-2,70)+coord_geo(abbrv = T,neg=T,skip=NULL,dat="epochs",size=2)+theme_tree2(axis.text.x=element_blank())+guides(x = "none")
```

## Juntar varios parametros en `ggtree`

Cómo en ggplot, todos estos parámetros son aditivos, por lo cual puedes construir la filogenia de manera gradual

```{r, fig.width=8, fig.height=8}
#| eval: false
#| echo: true

p1+ layout_circular()+xlim(NA,150)+geom_tiplab(size=2,color="darkblue")+
  geom_tippoint(size=1,color="brown",shape=10)+
  geom_nodelab(size=1,color="purple")+
  geom_nodepoint(size=2,color="red",alpha=0.3,shape=16)
```

## 

```{r, fig.width=4, fig.height=5,fig.align='center'}

#| eval: true
#| echo: true
#| include: true
p1+ layout_circular()+xlim(NA,150)+geom_tiplab(size=2,color="darkblue")+
  geom_tippoint(size=1,color="brown",shape=10)+
  geom_nodelab(size=1,color="purple")+
  geom_nodepoint(size=2,color="red",alpha=0.3,shape=16)
```

## Anotaciones en Árboles

Ahora para la anotación de los árboles, se pueden hacer varias cosas, por ejemplo, quiero seleccionar la parte de la filogenia donde se encuentra las especies de la Familia *Pimelodidae*

## Obtener nodos

Para esto primero debemos encontrar el nodo del ancestro en común más reciente para este grupo. Usando un *tibble* y la estructura de `dplyr` es muy fácil

Después usando la función `getMRCA()` podemos encontrar el ancestro en común de estas especies

```{r}
#| eval: true
#| echo: true
fishdata$sciname<-row.names(fishdata)
pimelo<-fishdata %>% filter(Family=="Pimelodidae")

nodepimelo<-getMRCA(fishtree,pimelo$sciname)
nodepimelo
```

. . .

## 

Ahora sabiendo que el ancestro en común de la familia *Pimelodidae* se encuentra en el nodo 80, puedo utilizar esta información para anotar la filogenia utilizando el parámetro *geom_cladelab*:

```{r, fig.width=8, fig.height=8,fig.align='center'}
#| eval: true
#| echo: true
p1+xlim(NA, 110)+ geom_cladelab(node=nodepimelo,label = "Pimelodidae",offset=0,barcolor="red",textcolor="red",angle=0, offset.text=0.1)



```

## 

y que tal si identificamos varias familias:

```{r, fig.width=8, fig.height=5,fig.align='center'}
#| eval: true
#| echo: true
Siluridae<-fishdata %>% filter(Family=="Siluridae") %>% dplyr::select(sciname)
nodesiluri<-getMRCA (fishtree,Siluridae$sciname)
Loricariidae<-fishdata %>% filter(Family=="Loricariidae") %>% dplyr::select(sciname)
nodelori<-getMRCA (fishtree,Loricariidae$sciname)
Bagriidae<-fishdata %>% filter(Family=="Bagridae") %>% dplyr::select(sciname)
nodeBagri<-getMRCA (fishtree,Bagriidae$sciname)


```

## 

Ahora podemos jugar con varios parámetros gráficos
```{r}
#| eval: true
#| include: false

offspring.tbl_tree_item <- utils::getFromNamespace(".offspring.tbl_tree_item", "tidytree")
```


```{r, fig.width=8, fig.height=5,fig.align='center'}
#| eval: false
#| echo: true
#| 
p1+xlim(NA, 110)+
  geom_cladelab(node=nodepimelo,label ="Pimelodidae",offset=0,barcolor="red",textcolor="brown",angle=0,offset.text=0.1)+
  geom_cladelab(node=nodesiluri,label="Siluridae",offset=0,barcolor="blue",textcolor="blue",angle=0,offset.text=0.1)+
  geom_cladelab(node=nodelori,label="Loricariidae",offset=0,barcolor="green",textcolor="green",angle=0,offset.text=0.1)+
  geom_cladelab(node=nodeBagri,label = "Bagridae",offset=0,barcolor="black",textcolor="black",angle=0, offset.text=0.1)
```

## 

```{r, fig.width=8, fig.height=5,fig.align='center'}
#| eval: true
#| echo: true
#| 
p1+xlim(NA, 110)+
  geom_cladelab(node=nodepimelo,label ="Pimelodidae",offset=0,barcolor="red",textcolor="brown",angle=0,offset.text=0.1)+
  geom_cladelab(node=nodesiluri,label="Siluridae",offset=0,barcolor="blue",textcolor="blue",angle=0,offset.text=0.1)+
  geom_cladelab(node=nodelori,label="Loricariidae",offset=0,barcolor="green",textcolor="green",angle=0,offset.text=0.1)+
  geom_cladelab(node=nodeBagri,label = "Bagridae",offset=0,barcolor="black",textcolor="black",angle=0, offset.text=0.1)
```

. . .

## 

También podemos modificar parámetros gráficos de las anotaciones.

```{r, fig.width=8, fig.height=5,fig.align='center'}
#| eval: true
#| echo: true
p1+xlim(NA, 110)+ geom_cladelab(node=nodeBagri,label="Bagridae",geom="label",fill="skyblue",textcolor="black", barcolor="gray",angle=90)
```

## 

También podemos realizar una anotación entre dos taxa, que pudieran o no estar relacionados, utilizando el parámetro `geom_strip()`:

```{r, fig.width=8, fig.height=5,fig.align='center'}
#| eval: true
#| echo: true
p1+xlim(0,120)+
  geom_strip("Neoarius_graeffei","Gogo_arcuatus", label=" un clado polifilético", barsize = 2, offset.text = 0.2)
```

## Resaltar

Otro parámetro de anotación muy interesante es *geom_highlight*, el cual nos permite destacar clados en particular, utilizando los nodos de ancestro en común:

```{r, fig.width=8, fig.height=5,fig.align='center'}
#| eval: true
#| echo: true
p1+ geom_highlight(node=80,alpha=0.5,fill="purple",type = "rect")
```

¿Qué clado es este? ...

## 

```{r, fig.width=8, fig.height=5,fig.align='center'}
#| eval: true
#| echo: true
p1+
  geom_highlight(node=80,alpha=0.5,fill="purple",type = "rect")+
  geom_cladelab(node=80,label = "Pimelodiade",offset=0,barcolor="#9418f2",textcolor="#4c0980", offset.text=0)+
  xlim(0,110)
```

## Phylopic

Una función bastante interesante de `ggtree` es que se pueden personalizar las filogenías utilizando recursos en línea como *phylopic* o enriquecerlas con imágenes propias. 

Para poder hacer uso de esta función, primero debemos cargar 2 paquete extra:

```{r}
#| eval: true
#| echo: true
library("rsvg")
library("rphylopic")
```

## 

podemos probar de la siguiente manera:

```{r, fig.width=8, fig.height=5,fig.align='center'}
img <- pick_phylopic(name = "Ambystoma mexicanum", n = 1, view = 1)


```

. . .

## 

Hacer uso de *phylopic* para personalizar las anotaciones de las filogenias requiere que primero hagamos una tabla con los nodos, el nombre de la especie o clado a los cuales vamos a anotar y el phylopic_id.

En este ejemplo utilizaré los clados *Pimelodidae*, *Siluridae*,*Loricariidae*. Encontrar los phylopic_id es fácil usando la función `phylopic_uid()`

```{r}
#| eval: true
#| echo: true
ids<-phylopic_uid(c("Phractocephalus hemioliopterus","Siluridae","Ameiurus","Chaetostoma microps"))

```

## 

Con estos ids, ya podemos crear nuestra tabla con los datos necesarios y después gráficar nuestra filogenia:

```{r, fig.width=8, fig.height=5,fig.align='center'}
#| eval: true
#| echo: true
dt<-data.frame(node=c(nodepimelo,nodesiluri,nodeBagri,nodelori),
               image=ids$uid,Family=c("Pimelodidae","Siluridae","Bagridae","Loricariidae"),
               size=c(0.1,0.1,0.1,0.05))
dt
```

## 

```{r, fig.width=8, fig.height=5,fig.align='center'}
#| eval: true
#| echo: true


 p1+ylim(-10,80)+geom_cladelab(data = dt,mapping = aes(node = node, label = Family,image = image, color = Family),geom = "phylopic",imagesize=dt$size, offset.text=4)


```

## 

Además, usando la argumentación como en `ggplot`, podemos personalizar los colores de nuestros *phylopics*:

```{r, fig.width=8, fig.height=5,fig.align='center'}
#| eval: true
#| echo: true


dt$colourss=c("#3d5a80","#98c1d9","#ee6c4d","#293241")

p1+ylim(-10,80)+geom_cladelab(data = dt, mapping = aes(node = node, label = Family, image = image, color = Family), geom = "phylopic", imagecolor=dt$colourss,barcolour=dt$colourss,imagesize=dt$size,offset.text=4)

```

## 

Utilizando las funciones que ya conocemos, podemos crear una filogenia bastante atractiva:

```{r, fig.width=8, fig.height=5,fig.align='center'}
#| eval: false
#| echo: true
 p1+ylim(-10,80)+xlim(-10,120)+
   geom_cladelab(data = dt, 
                       mapping = aes(node = node, label = Family, 
                                     image = image, color = Family), 
                       geom = "phylopic", 
                       imagecolor=dt$colourss,
                       barcolour=dt$colourss,
                       imagesize=dt$size,offset.text=5)+
  geom_highlight(dt,mapping = aes(node = node, label = Family,color = Family),type="rect",fill=dt$colourss,color=dt$colourss)+
  geom_cladelab(node=80,label = "Pimelodiade",geom = "text",offset=0,barcolor="#3d5a80",textcolor= "#3d5a80", offset.text=10)+
  geom_cladelab(node=113,label = "Bagridae",geom = "text",offset=0,barcolor="#98c1d9",textcolor= "#98c1d9", offset.text=10) +
  geom_cladelab(node=119,label ="Siluridae" ,geom = "text",offset=0,barcolor="#ee6c4d",textcolor= "#ee6c4d",offset.text=10)+
  geom_cladelab(node=128,label = "Loricarridae",geom = "text",offset=0,barcolor="#293241",textcolor= "#293241",offset.text=10)



```

## 

```{r, fig.width=8, fig.height=5,fig.align='center'}
#| eval: true
#| echo: false
 p1+ylim(-10,80)+xlim(-10,120)+
   geom_cladelab(data = dt, 
                       mapping = aes(node = node, label = Family, 
                                     image = image, color = Family), 
                       geom = "phylopic", 
                       imagecolor=dt$colourss,
                       barcolour=dt$colourss,
                       imagesize=dt$size,offset.text=5)+
  geom_highlight(dt,mapping = aes(node = node, label = Family,color = Family),type="rect",fill=dt$colourss,color=dt$colourss)+
  geom_cladelab(node=80,label = "Pimelodiade",geom = "text",offset=0,barcolor="#3d5a80",textcolor= "#3d5a80", offset.text=10)+
  geom_cladelab(node=113,label = "Bagridae",geom = "text",offset=0,barcolor="#98c1d9",textcolor= "#98c1d9", offset.text=10) +
  geom_cladelab(node=119,label ="Siluridae" ,geom = "text",offset=0,barcolor="#ee6c4d",textcolor= "#ee6c4d",offset.text=10)+
  geom_cladelab(node=128,label = "Loricarridae",geom = "text",offset=0,barcolor="#293241",textcolor= "#293241",offset.text=10)



```

## 

O estas:

```{r, fig.width=8, fig.height=8,fig.align='center'}
#| eval: false
#| echo: true



p2<-ggtree(fishtree,layout="circular",color="white")+theme_tree("black")

p3<-p2+xlim(NA,250)+geom_cladelab(data = dt,mapping = aes(node = node, label = Family, 
                                     image = image, color = Family), 
              geom = "phylopic", 
              barcolour=dt$colourss,
              imagecolor=dt$colourss,
              alpha=c(0.8,0.8,0.8,0.8),
              imagesize=c(0.2,0.2,0.2,0.1),offset.text=c(130,120,100,100))+

  geom_highlight(node=80,fill="#3d5a80")+
  geom_cladelab(node=80,label="Pimelodidae",barcolor="#3d5a80",textcolor="white",offset.text=2, fontsize=4,angle =-30)+
  
  geom_highlight(node=113,fill="#98c1d9")+
  geom_cladelab(node=113,label="Bagridae",barcolor="#98c1d9",textcolor="white",offset.text=2, fontsize=4,angle =110)+
  
  geom_highlight(node=119,fill="#ee6c4d")+
  geom_cladelab(node=119,label="Siluridae",barcolor="#ee6c4d",textcolor="white",offset.text=2, fontsize=4,angle =80)+
  
  geom_highlight(node=128,fill="#293241")+
  geom_cladelab(node=128,label="Loricariidae",barcolor="#293241",textcolor="white",offset.text=2,angle = 8)
  

p3


```

## 

```{r, fig.width=8, fig.height=8,fig.align='center'}
#| eval: true
#| echo: false

p2<-ggtree(fishtree,layout="circular",color="white")+theme_tree("black")

p3<-p2+xlim(NA,250)+geom_cladelab(data = dt,mapping = aes(node = node, label = Family, 
                                     image = image, color = Family), 
              geom = "phylopic", 
              barcolour=dt$colourss,
              imagecolor=dt$colourss,
              alpha=c(0.8,0.8,0.8,0.8),
              imagesize=c(0.2,0.2,0.2,0.1),offset.text=c(130,140,140,140))+

  geom_highlight(node=80,fill="#3d5a80")+
  geom_cladelab(node=80,label="Pimelodidae",barcolor="#3d5a80",textcolor="white",offset.text=2, fontsize=4,angle =-30)+
  
  geom_highlight(node=113,fill="#98c1d9")+
  geom_cladelab(node=113,label="Bagridae",barcolor="#98c1d9",textcolor="white",offset.text=2, fontsize=4,angle =110)+
  
  geom_highlight(node=119,fill="#ee6c4d")+
  geom_cladelab(node=119,label="Siluridae",barcolor="#ee6c4d",textcolor="white",offset.text=2, fontsize=4,angle =80)+
  
  geom_highlight(node=128,fill="#293241")+
  geom_cladelab(node=128,label="Loricariidae",barcolor="#293241",textcolor="white",offset.text=2,angle = 8)
  

p3

```

## 

## Atributos en la filogenia

Finalmente, se puede usar `ggtree()`, para graficar atributos de las especies en la filogenia.

Para hacer esto, primero debemos cargar los atributos de los en este caso usaremos la longitud estándar máxima y el hábito migratorio:

```{r}
#| eval: true
#| echo: true

fishdata<-read.table(here("data","DataFish.txt"))


head(fishdata)
```

## 

Una vez cargados los datos, la manera más fácil de utilizarlos es uniendolos a la filogenia usando la función `full_join`, es importante que las especies estén etiquetadas como label, para que la función las reconozca:

```{r}
#| eval: true
#| echo: true

datatree<-left_join(fishtree,fishdata,by="label")

```

## 

¡Listo! Ahora tenemos una filogenia con atributos y podemos graficarlos juntos

Primero graficaremos los valores continuos de la longitud sobre las puntas del árbol en una escala de colores:

```{r, fig.width=6, fig.height=8,fig.align='center'}
#| eval: true
#| echo: true

p4<-ggtree(datatree)
p4+geom_tippoint(aes(color= Length),size=3)
```

## 

podemos también personalizar esta escala:

```{r, fig.width=6, fig.height=8,fig.align='center'}
#| eval: true
#| echo: true

p4+
  geom_tippoint(aes(color= Length),shape=19,size=3)+scale_colour_gradient(low='blue', high='red',breaks= c(15,50,100,150,200,300))
```

## 

¿Y cómo se verían los datos discretos?

```{r, fig.width=6, fig.height=8,fig.align='center'}
#| eval: true
#| echo: true

p4+geom_tippoint(aes(color=salinity),shape=15)+ scale_colour_manual(values = c("blue","gray","skyblue"))
```

## 

y ¿Pueden combinarse?

```{r, fig.width=6, fig.height=8,fig.align='center'}
#| eval: false
#| echo: true

px<- p4+ geom_tippoint(aes(color=salinity),shape=15)+
  scale_color_manual(values = c("blue","gray","skyblue"))+
  scale_fill_manual(values = c("blue","gray","skyblue"))

dd<-data.frame(id=p4$data$label,value=p4$data$Length)  
  
px+ geom_facet(panel="Length",data =dd[1:65,],geom=geom_col, 
               mapping=aes(x=Length,color=salinity,fill=salinity),orientation='y')+
    theme_tree2()
```

## 

```{r, fig.width=6, fig.height=8,fig.align='center'}
#| eval: true
#| echo: false

px<- p4+ geom_tippoint(aes(color=salinity),shape=15)+
  scale_color_manual(values = c("blue","gray","skyblue"))+
  scale_fill_manual(values = c("blue","gray","skyblue"))

dd<-data.frame(id=p4$data$label,value=p4$data$Length)  
  
px+ geom_facet(panel="Length",data =dd[1:65,],geom=geom_col, 
               mapping=aes(x=Length,color=salinity,fill=salinity),orientation='y')+
    theme_tree2()
```

## 

## 

`ggtreeExtra`

```{r, fig.width=6, fig.height=8,fig.align='center'}
#| echo: true
#| eval: false
library(ggtreeExtra)

p5<-p4+geom_tippoint(aes(colour=AnaCat))+scale_color_manual(values = c("#3d5a80","#98c1d9","#e0fbfc","#293241","#ee6c4d"))

p5+geom_fruit(data=dd[1:65,],
         geom=geom_bar,
         mapping = aes(
                     y=id,
                     x=value,
                     group=salinity,
                     fill=salinity),pwidth=0.38, 
                    orientation="y", 
                    stat="identity",axis.params=list(
                         axis       = "x",
                         text.size  = 1.8,
                         hjust      = 1,
                         vjust      = 0.5,
                         nbreak     = 3))+ scale_fill_manual(values = c("blue","gray","skyblue"))
  

```

## 

```{r, fig.width=6, fig.height=8,fig.align='center'}
#| echo: false
#| eval: true


library(ggtreeExtra)

p5<-p4+geom_tippoint(aes(colour=AnaCat))+scale_color_manual(values = c("#3d5a80","#98c1d9","#e0fbfc","#293241","#ee6c4d"))

p5+geom_fruit(data=dd[1:65,],
         geom=geom_bar,
         mapping = aes(
                     y=id,
                     x=value,
                     group=salinity,
                     fill=salinity),pwidth=0.38, 
                    orientation="y", 
                    stat="identity",axis.params=list(
                         axis       = "x",
                         text.size  = 1.8,
                         hjust      = 1,
                         vjust      = 0.5,
                         nbreak     = 3))+ scale_fill_manual(values = c("blue","gray","skyblue"))
  
```

## 

Para poder anotar las filogenias con imagenes, es recomendable usar árboles filogéticos pequeños. En este ejemplo usaremos una filogenia parafiletica con las Familias *Pimelodidae*,*Doradidae* y *Loricariidae*

Entonces, primero recuperamos un representante de cada grupo, *ape* es muy bueno para esto usando la función *keep.tip*:

```{r, fig.width=6, fig.height=8,fig.align='center'}
#| eval: true
#| echo: true
grouptree<-fishtree %>%
keep.tip(c("Pimelodus_maculatus", "Lithodoras_dorsalis","Loricariichthys_anus"))

grouptree$tip.label<-c("Pimelodidae", "Doraridae","Loricariidae")

p6<-ggtree(grouptree,size=1)+xlim(0,120)+ geom_tiplab(color="navyblue",offset = 0.5,size=5)
p6
```

## 

Una vez teniendo este árbol parafilético, podemos colocar las imagenes en cada tip, es importante considerar, que las imagenes deben tener el nombre exacto del grupo o especie y el mismo formato:

Las fotos aqui presentadas provienen del Proyecto `cavfish`

```{r, fig.width=10, fig.height=8,fig.align='center'}
#| eval: true
#| include: true
p6+ 
  xlim(NA, 150) +
  geom_tiplab(aes(image=paste0("imgs/imagenes/", label, '.png')),geom="image", offset=3, align=1, size=0.6)+
  geom_tiplab(geom="label",color="black",fill="white",offset = 30)
```

## 

Pero, ¿Qué pasa si no me sé la taxonomía o no tengo la filogenia del grupo que estoy estudiando?

```{r}
#| eval: true
#| include: false

picuid<-phylopic_uid(c("Argania","Quiscalus","Corvus","Desmodus","Vulpes","Canis lupus","Canis latrans"),seed=123)
pics<-data.frame(label=Nktree$tip.label,uid=picuid$uid)
phylopicNK<-ggtree(Nktree) %<+% pics+
  geom_tiplab(aes(image=uid,color=label),geom="phylopic")+
  theme(legend.position="none")+
  scale_color_manual(values=c("#81613c","#919494","black","#473434","#2e275a","#e0cc77","#9ea26b"))
```

## 

¿Se acuerdan de esta filogenia?

```{r}
#| eval: true
#| echo: true
phylopicNK
```

## 

Haciendo uso de recursos en línea como *Open tree of Life*(OTL), podemoos obtener una filogenia utilizando las especies que necesitemos.

## 

OTL tiene un útil paquete en R (`rotl`),para obtener filogenia

```{r}
#| eval: true
#| echo: true 
#| warning: false

library("rotl")
otl_tree<-rotl::tnrs_match_names(c("Quiscalus mexicanus","Canis lupus","Corvus corax","Canis latrans","Vulpes vulpes","Desmodus rotundus","Sideroxylon celastrinum")) %>% 
  pull(ott_id) %>% 
  tol_induced_subtree(label_format="name")
```

## 

```{r}
#| eval: true
#| echo: true
p_ott<-ggtree(otl_tree)+
  xlim(0,9)+
  geom_tiplab(color="blue")
p_ott
```

## 

Para la función de `rtol`, **NO** es necesario introducir las especies en orden, ya que ésta recuperará la taxonomia válida y nos arrojará una filogenia podada.

En este caso, OTL nos regresó exactamente la misma filogenia que creamos al principio:

```{r, fig.width=10, fig.height=8,fig.align='center'}
#| eval: true
#| echo: true
p_nk<-ggtree(Nktree)+
  xlim(0,9)+
  geom_tiplab(color="red")

p_ott/p_nk
```

## 
