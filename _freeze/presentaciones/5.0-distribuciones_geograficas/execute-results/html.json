{
  "hash": "34a911c73438a403d8e43d8c282aae1c",
  "result": {
    "markdown": "---\ntitle: \"Distribuciones geográficas\"\nauthor: Juliana Herrera-Pérez & Fabricio Villalobos\nformat: revealjs\neditor: visual\n---\n\n\n\n## Área de distribución geográfica\n\n> \"...el espacio donde las condiciones ecológicas favorecen, real o potencialmente y en varios niveles, las interacciones no efímeras de los individuos de una especie\" Mota-Vargas & Rojas-Soto 2012\n\n## Puntos, polígonos y mapas de distribución\n\nLos registros (colectas georeferenciadas) de las especies son los datos primarios de biodiversidad, a partir de los cuáles podemos estimar las áreas de distribución de estas y describir/evaluar los patrones de diversidad que emergen de su agregación (traslape; e.g., gradiente geográfico de riqueza)\n\n. . .\n\n## \n\n-   En este ejemplo/ejercicio veremos cómo obtener dichos registros directamente desde R\n\n. . .\n\n-   También, veremos cómo generar áreas de distribución (extenciones de presencia) a partir de estos registros, creando polígonos de diferentes tipos (mínimo, alpha y alpha dinámico)\n\n. . .\n\n-   Los datos de registros serán obtenidos de la plataforma en línea [Global Biodiversity Information Facility - GBIF](https://www.gbif.org/)\n\n. . .\n\n## Paquetes necesarios:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rgbif)\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLinking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.3.1; sf_use_s2() is TRUE\n```\n:::\n\n```{.r .cell-code}\nlibrary(rnaturalearth)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nThe legacy packages maptools, rgdal, and rgeos, underpinning the sp package,\nwhich was just loaded, will retire in October 2023.\nPlease refer to R-spatial evolution reports for details, especially\nhttps://r-spatial.org/r/2023/05/15/evolution4.html.\nIt may be desirable to make the sf package available;\npackage maintainers should consider adding sf to Suggests:.\nThe sp package is now running under evolution status 2\n     (status 2 uses the sf package in place of rgdal)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nSupport for Spatial objects (`sp`) will be deprecated in {rnaturalearth} and will be removed in a future release of the package. Please use `sf` objects with {rnaturalearth}. For example: `ne_download(returnclass = 'sf')`\n```\n:::\n\n```{.r .cell-code}\nlibrary(alphahull)\nlibrary(rangeBuilder)\nlibrary(janitor)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'janitor'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n```\n:::\n:::\n\n\n\n# Obteniendo registros de presencia de GBIF\n\n## \n\nPara comenzar podemos escoger una especie y aplicar la función `occ_data`\n\nEl objeto `sp_data` es una lista con datos sobre los resultados obtenidos en GBIF (incluyendo algunos metadatos)\n\nPara trabajar únicamente con la tabla de registros hay que seleccionar el objeto data dentro del mismo\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsp_data <- occ_data(scientificName = \"Musonycteris harrisoni\", limit = 500)[[2]]\n```\n:::\n\n\n\n. . .\n\n## \n\nChecar el nombre de las columnas (para después buscar únicamente las de posición geográfica: lat/long)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(sp_data)[1:30]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"key\"                    \"scientificName\"         \"decimalLatitude\"       \n [4] \"decimalLongitude\"       \"issues\"                 \"datasetKey\"            \n [7] \"publishingOrgKey\"       \"installationKey\"        \"hostingOrganizationKey\"\n[10] \"publishingCountry\"      \"protocol\"               \"lastCrawled\"           \n[13] \"lastParsed\"             \"crawlId\"                \"projectId\"             \n[16] \"basisOfRecord\"          \"individualCount\"        \"occurrenceStatus\"      \n[19] \"sex\"                    \"taxonKey\"               \"kingdomKey\"            \n[22] \"phylumKey\"              \"classKey\"               \"orderKey\"              \n[25] \"familyKey\"              \"genusKey\"               \"speciesKey\"            \n[28] \"acceptedTaxonKey\"       \"acceptedScientificName\" \"kingdom\"               \n```\n:::\n:::\n\n\n\n. . .\n\n## \n\n1.Crear otro objeto a partir `sp_data` únicamente con long/lat\n\n. . .\n\n2.Quedarse únicamente con los puntos/registros individuales (i.e., excluir duplicados)\n\n. . .\n\n3.Transformarlo en un objeto espacial\n\n. . .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsp_p1<-sp_data%>%\n  select(decimalLongitude,decimalLatitude,species)%>%\n  mutate(lat=decimalLatitude,lon=decimalLongitude)%>%\n  distinct() %>%\n  na.omit() %>% \n  sf::st_as_sf(coords = c('decimalLongitude','decimalLatitude'),crs=\"EPSG: 4326\")\n```\n:::\n\n\n\n::: {.alert .alert-success role=\"alert\"}\nNOTA: el nombre de la variable puede ser diferente (.e.g \"LATITUDE\", \"Latidude\", \"lat\", etc. Siempre hay que checar antes)\n:::\n\n. . .\n\n## \n\nGraficar (poner en un mapa) los puntos de presencia de nuestra especie\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot()+ geom_sf(data=sp_p1, col=\"blue\",pch=19)\n```\n\n::: {.cell-output-display}\n![](5.0-distribuciones_geograficas_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n## \n\nAgregar el mapa del mundo para saber qué onda!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrld <- ne_countries(scale = \"small\",returnclass = \"sf\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot()+\n  geom_sf(data=wrld)+geom_sf(data=sp_p1,col=\"blue\",pch=19,size=1)+coord_sf(expand = F) +\n  labs(x=\"Longitud decimal \",\n       y=\"Latitud decimal\",\n       title=expression(paste(\"Puntos reportados \", italic(\"Musonycteris harrisoni\"))))+\n  theme(plot.title = element_text(hjust = 0.5))\n```\n\n::: {.cell-output-display}\n![](5.0-distribuciones_geograficas_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n## \n\nHay algo claramente equivocado, ¿cierto? Los puntos/registros necesitan ser \"curados\" (limpiados)\n\n. . .\n\nEliminar los puntos con mala georeferencia (en este caso, puntos obvios en el \"viejo mundo\")\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsp_p1<-sp_data%>%\n  select(decimalLongitude,decimalLatitude,species)%>%\n  mutate(lat=decimalLatitude,lon=decimalLongitude)%>%\n  distinct() %>% na.omit() %>% \n  sf::st_as_sf(coords = c('decimalLongitude','decimalLatitude'),crs=\"EPSG: 4326\")%>%\n  filter(lat> 0.5) %>% filter(lat< 22)\n```\n:::\n\n\n\n## \n\nAhora sí, mapeamos de nuevo pero sólamente en la región de interés (México)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmex_map <- filter(wrld,name==\"Mexico\")\n```\n:::\n\n\n\n. . .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot()+geom_sf(data=mex_map)+\n  geom_sf(data=sp_p1,col=\"blue\",pch=19,size=1)+coord_sf(expand = F)\n```\n\n::: {.cell-output-display}\n![](5.0-distribuciones_geograficas_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n. . .\n\n## \n\nY ¿Cómo eliminamos los registros que están en el mar?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsp_p1<-sp_data%>%\n  select(decimalLongitude,decimalLatitude,species)%>%\n  mutate(lat=decimalLatitude,lon=decimalLongitude)%>%\n  distinct() %>%\n  na.omit() %>% \n  sf::st_as_sf(coords = c('decimalLongitude','decimalLatitude'),crs=\"EPSG: 4326\")%>%\n  filter(lat> 0.5) %>%\n  filter(lat< 22)%>%\n  filter(lon> -105.56611)\n```\n:::\n\n\n\n# Polígono convexo mínimo\n\n## \n\nUna vez tenemos los datos curados, podemos crear nuestro mcp\n\n\n. . .\n\n¿Cómo se ve?\n\n",
    "supporting": [
      "5.0-distribuciones_geograficas_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}